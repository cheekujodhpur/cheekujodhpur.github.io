<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kumar Ayush</title>
    <description>I am Kumar Ayush, an Engineering Physics sophomore at Indian Institute of Technology, Bombay. I love to cook, travel, socialize and tap into physical sciences. My mood is usually a superposition of psychopath, mad hatter, party animal and curious being and may collapse into any of these when you meet me. This is my personal homepage</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 25 Dec 2017 12:02:18 +0530</pubDate>
    <lastBuildDate>Mon, 25 Dec 2017 12:02:18 +0530</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>A black hole through the looking glass: Part 3</title>
        <description>&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After I am able to imitate the smallpt output using ray integration, the only modification to produce a black hole is changing the integration equations. I start with the Schwarschild metric in isotropic co-ordinates and follow the methods described in &lt;a target=&quot;_blank&quot; href=&quot;https://arxiv.org/abs/1502.03809&quot;&gt;Interstellar paper&lt;/a&gt;, to get the desired output. I sure had to tweak a bit with the scene to fit the black hole in the center of the room, as I had promised earlier. Follows an image of how a blackhole with Schwarschild radius of 5 units would look, before I explain a few assumptions that I made&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;artistic&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/artistic.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 1. Black Hole of Schwarschild Radius 5 units at center&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As a bonus, here is an einstein ring with just the hole and a light source behind it&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;einstein&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/einstein_ring.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 2. Einstein ring&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That's all folks! I'll probably do the explaining later&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 22:04:00 +0530</pubDate>
        <link>http://localhost:4000/75dos/relativity/graphics/2016/10/05/grsmallpt-3/</link>
        <guid isPermaLink="true">http://localhost:4000/75dos/relativity/graphics/2016/10/05/grsmallpt-3/</guid>
        
        
        <category>75dos</category>
        
        <category>relativity</category>
        
        <category>graphics</category>
        
      </item>
    
      <item>
        <title>A black hole through the looking glass: Part 2</title>
        <description>&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I am doing my first formal Graphics course right now. I have ideas about the basic jargon because I spent a week trying to learn DirectX back in school. But ray tracing was definitely something new. In my opinion, any one who has thought a lot about it would gain an intuitive idea about ray tracing, because it's exactly what it says it is. To formally get started with it, I read a book called &lt;i&gt;Introduction to Ray Tracing&lt;/i&gt; by Andrew S. Glassner.&lt;/p&gt;

&lt;p&gt;Along with this book, I studied the &lt;i&gt;smallpt&lt;/i&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://www.kevinbeason.com/smallpt/&quot;&gt;code by Kevin Beason&lt;/a&gt;. This is pretty much codegolfing, because this boasts of being a 99 line cpp code for raytracing. My guide Prof. Parag Chaudhuri emphasized correctness before speed, and hence we concluded that if I achieve the image generated by smallpt using integration of the ray paths along straight lines, we can move on to curved spacetimes just by changing a small function somewhere in the code which controls the said integration. This took more time than expected. The following is the story of what I was doing and the outputs I got, accompanied by what I did to correct for it. Here is an image from smallpt which you can use for reference at every step I talk about below.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;original&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/result_200.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 1. Original Result&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I had &lt;i&gt;legendary&lt;/i&gt; ideas on how I can move my ray along 3d pixels, also called voxels by many. If the voxel I am in intersects with some sphere in the scene, I break down the current voxel in 8 smaller voxels and travel along them, repeating this until I am some epsilon away from the sphere. Of course when I say &lt;i&gt;legendary&lt;/i&gt; I mean stupid. Because here is what I got.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;voxel&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/voxel.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 2. My First Try&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It took me two weeks, which also involve my mid semester examinations to realize that the only thing that I needed to correct it is to get away with this voxel business. You see, the way I detected if the ray hits a sphere in a certain voxel or not was by advancing the ray to the next voxel and checking if the ray is in opposite sides (in or out) of the sphere in the two cases, for every sphere in the scene. Doing this by advancing a ray through quantized voxels was just adding to the inaccuracy. I simply use the position of the ray I get from the numerical integration function and I go ahead with it. Here is what I get.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;novoxel&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/novoxel.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 3. Correcting for voxel&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At first glance, I was really happy at this point, but on a &lt;i&gt;closer&lt;/i&gt; inspection I realized that there is no refraction in my code. If you take a look at the original result at this point and you are more observant than I was for a while, you'll see that the sphere on the right is a refracting sphere where my code makes it reflective as well. Well, to be more technically precise, my code makes it specular reflective. Everything has some diffuse reflection anyways. It does not take more than an hour of walk around Hiranandani Gardens in Powai before I understand what's up, but I'll skip a week ahead when I finally have the image corected. The rays always stop a bit outside the sphere, but the resulting rays after refraction need to start a little inside. It was a different case with smallpt where you could reject one of the two solutions of the intersection solution but here I had to manually push the ray inside by as much as it is outside the sphere. Here is the output&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;refraction&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/refraction.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 4. Correcting for refraction&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It looks very similar to the original result I know, but at this point you need to stop trying to be ultra observant with human eyes and rely on taking a diff of the two images to notice that there is a dark patch around the equator of the second sphere in my output which should not exist. Now I'll jump straight to how to correct it, without trying to explain why it works, because I know I'll fail at that. The epsilon within which I detect that the ray hits the sphere was set at the machine epsilon for double in cpp. I reduced it to five orders of magnitude higher than that and the following is the output I got.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;final&quot; style=&quot;width:500px;border:solid 1px black;&quot; src=&quot;/media/grsmallpt/final.png&quot; /&gt;&lt;br /&gt;
&lt;span style=&quot;font-size:16px;&quot;&gt;Fig 5. The correct output?&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Yippee!&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 22:20:00 +0530</pubDate>
        <link>http://localhost:4000/75dos/relativity/graphics/2016/09/24/grsmallpt-2/</link>
        <guid isPermaLink="true">http://localhost:4000/75dos/relativity/graphics/2016/09/24/grsmallpt-2/</guid>
        
        
        <category>75dos</category>
        
        <category>relativity</category>
        
        <category>graphics</category>
        
      </item>
    
      <item>
        <title>A black hole through the looking glass: Part 1</title>
        <description>&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I assume you have seen &lt;i&gt;Interstellar&lt;/i&gt;, the famed Nolan movie. Now having a black hole in the scene brings a natural question &quot;How does a black hole look?&quot; Well, a dark patch on the sky simply models the black hole, or more precisely, everything inside the Schwarschild radius of the BH. A more interesting question, then is to ask &quot;How do things look around a black hole?&quot; Even a law major would've come across enough popular science to know that light bends around a black hole. If you stretch your imagination, you can see objects getting distorted and being able to see things not in direct line of vision.&lt;/p&gt;
&lt;p&gt;If you want to be a bit accurate about all this and generate a CGI of how it'll really look, &lt;a target=&quot;_blank&quot; href=&quot;https://arxiv.org/abs/1502.03809&quot;&gt;this (arXiv 1502.03609)&lt;/a&gt; is what was done for Interstellar. They describe it well enough that any one with a fair amount of knowledge of coding can try it out at home, and in fact explicitly encourage this for students.&lt;/p&gt;
&lt;p&gt;If you Google &lt;i&gt;black hole raytracing&lt;/i&gt; or something similar, then you get a beautiful &lt;a target=&quot;_blank&quot; href=&quot;http://rantonels.github.io/starless/&quot;&gt;code&lt;/a&gt;. Frankly, I did not feel very good at seeing this. This does almost everything that I wanted to do, until I realized something about this and the other Relativistic Ray Tracing codes written for astrophysical research. They solve some metrics in some situations, and only take into account specific scattering models which do not help if I want to look at the situation out of an astrophysical scenario.&lt;/p&gt;
&lt;p&gt;I am sure I'd have left you pondering about what do I really want to do then over the last few sentences. I'll be exemplar in requesting you to imagine how would your face look if we're sitting across a table and there is a blackhole hovering between us. Yes, this probably does not have direct value to astroph research, but when you think about it, our faces can easily be replaced by accretion disks and the scattering model of reflection/refraction which is used in such scenarios can be replaced with an astrophysically relevant scattering model.&lt;/p&gt;
&lt;p&gt;And hence begins the journey of trying to see how would a black hole look if it were kept in your room.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 04:46:00 +0530</pubDate>
        <link>http://localhost:4000/75dos/relativity/graphics/2016/09/23/grsmallpt-1/</link>
        <guid isPermaLink="true">http://localhost:4000/75dos/relativity/graphics/2016/09/23/grsmallpt-1/</guid>
        
        
        <category>75dos</category>
        
        <category>relativity</category>
        
        <category>graphics</category>
        
      </item>
    
  </channel>
</rss>
